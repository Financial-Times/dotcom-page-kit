////
/// @group n-ui configure mixins
////

/// Configure a map of features
/// @param {Map} $features
/// @output none
/// @private
@mixin nUiConfigureFeatures($features: ()) {
	@each $feature-name, $feature-value in $features {
		@include nUiConfigureFeature($feature-name, $feature-value);
	}
}

/// Enable an individual feature
/// @param {String} $feature-name
/// @param {Boolean|String} $feature-value
/// @output none
/// @private
@mixin nUiConfigureFeature($feature-name, $feature-value) {
	@if map-has-key($n-ui-features, $feature-name) {
		$n-ui-features: map-merge($n-ui-features, ($feature-name: $feature-value)) !global;

		// if any required feature has a dependency, require them
		@if map-has-key($n-ui-feature-dependencies, $feature-name) {
			$dependency-names: map-get($n-ui-feature-dependencies, $feature-name);

			@each $dependency-name in $dependency-names {
				@if not map-get($n-ui-features, $dependency-name) {
					@include nUiConfigureFeature($dependency-name, true);
				}
			}
		}
	} @else {
		@error "No feature named '#{$feature-name}' is available";
	}
}

/// Configure n-ui
/// @param {Map} $features
/// @param {String} $preset
/// @param {Boolean} $output-critical DEPRECATED
/// @param {String} $variant DEPRECATED
/// @output none
@mixin nUiConfigure($features: (), $preset: null, $output-critical: false, $variant: null) {
	@if variable-exists('n-ui-configured') {
		@error 'nUiConfigure must only be called once';
	}

	// mixin a preset
	@if $preset {
		@if map-has-key($n-ui-presets, $preset) {
			@include nUiConfigureFeatures(map-get($n-ui-presets, $preset));
		} @else {
			@error "No preset named '#{$preset}' is available";
		}
	}

	// add manually configured features
	@include nUiConfigureFeatures($features);

	$n-ui-configured: true !global;
}

/// Debug comment
/// @output A loud comment listing configured n-ui features
@mixin nUiConfigureDebug() {
	/*! n-ui features: #{inspect($n-ui-features)} */
}
